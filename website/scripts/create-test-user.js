#!/usr/bin/env node

// Script to create a test user in Supabase for E2E testing
// This provides a more reliable alternative to the bypass mechanism

const { createClient } = require('@supabase/supabase-js')

async function createTestUser() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
  
  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Missing required environment variables:')
    console.error('   - NEXT_PUBLIC_SUPABASE_URL')
    console.error('   - SUPABASE_SERVICE_ROLE_KEY')
    process.exit(1)
  }

  // Create admin client with service role key
  const supabase = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  })

  const testEmail = 'test-admin@artful-archives-test.com'
  const testPassword = 'test-admin-password-123'

  try {
    console.log('üß™ Creating test user for E2E testing...')
    
    // First, try to delete existing test user if it exists
    const { data: existingUsers, error: listError } = await supabase.auth.admin.listUsers()
    
    if (!listError) {
      const existingUser = existingUsers.users.find(user => user.email === testEmail)
      if (existingUser) {
        console.log('üóëÔ∏è Removing existing test user...')
        await supabase.auth.admin.deleteUser(existingUser.id)
      }
    }

    // Create new test user
    const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
      email: testEmail,
      password: testPassword,
      email_confirm: true, // Skip email confirmation for test user
      user_metadata: {
        role: 'admin',
        is_test_user: true,
        created_for: 'e2e-testing'
      }
    })

    if (createError) {
      throw createError
    }

    console.log('‚úÖ Test user created successfully!')
    console.log(`   Email: ${testEmail}`)
    console.log(`   Password: ${testPassword}`)
    console.log(`   User ID: ${newUser.user.id}`)

    // Add user to admin_profiles table if it exists
    try {
      const { error: profileError } = await supabase
        .from('admin_profiles')
        .insert({
          id: newUser.user.id,
          email: testEmail,
          role: 'admin',
          is_test_user: true,
          created_at: new Date().toISOString()
        })
      
      if (!profileError) {
        console.log('‚úÖ Added to admin_profiles table')
      } else {
        console.log('‚ö†Ô∏è Could not add to admin_profiles:', profileError.message)
      }
    } catch (e) {
      console.log('‚ö†Ô∏è admin_profiles table may not exist')
    }

    // Generate .env.test file for E2E tests
    const envTestContent = `# Test user credentials for E2E testing
# Generated by scripts/create-test-user.js

E2E_TEST_EMAIL=${testEmail}
E2E_TEST_PASSWORD=${testPassword}
E2E_TEST_USER_ID=${newUser.user.id}

# Copy these to your .env.local if running tests locally
`

    require('fs').writeFileSync('.env.test', envTestContent)
    console.log('‚úÖ Created .env.test file with test credentials')

    console.log('')
    console.log('üéØ Next steps:')
    console.log('1. Update your E2E tests to use these credentials instead of bypass')
    console.log('2. Add proper cleanup in test teardown')
    console.log('3. Consider adding this user creation to your CI/CD pipeline')

  } catch (error) {
    console.error('‚ùå Failed to create test user:', error.message)
    process.exit(1)
  }
}

createTestUser()