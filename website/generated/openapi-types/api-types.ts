// ðŸŽ­ Auto-Generated API Types - A TypeScript Masterpiece! âœ¨
// ðŸŽª Generated by our OpenAPI Type Conjurer on 2025-09-12T08:11:52.740Z
// ðŸš« DO NOT EDIT MANUALLY - This file is conjured by magical scripts!
// ðŸ”„ To regenerate: npm run types:generate

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/audio-jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List audio jobs
         * @description Retrieve a paginated list of audio jobs with optional filtering
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by associated post ID */
                    post_id?: string;
                    /** @description Filter by job status */
                    status?: "pending" | "processing" | "completed" | "failed" | "cancelled";
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["AudioJob"][];
                            count?: number;
                            has_more?: boolean;
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create audio job
         * @description Initiate a new audio generation job
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AudioJobCreate"];
                };
            };
            responses: {
                /** @description Audio job created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AudioJob"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio-jobs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Audio job ID */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get audio job
         * @description Retrieve detailed information about a specific audio job
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Audio job ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Audio job details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AudioJob"];
                    };
                };
                /** @description Audio job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        /**
         * Update audio job
         * @description Update audio job configuration or status
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Audio job ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "cancelled";
                        config?: Record<string, never>;
                    };
                };
            };
            responses: {
                /** @description Audio job updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AudioJob"];
                    };
                };
                400: components["responses"]["BadRequest"];
                /** @description Audio job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        post?: never;
        /**
         * Delete audio job
         * @description Remove an audio job and its associated data
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Audio job ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Audio job deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Audio job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio-jobs/{id}/process": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process audio job
         * @description Start or resume processing of an audio job
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Processing started */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            /** Format: uuid */
                            job_id?: string;
                        };
                    };
                };
                /** @description Audio job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Job already processing */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio-jobs/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel audio job
         * @description Cancel a pending or processing audio job
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job cancelled */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AudioJob"];
                    };
                };
                /** @description Audio job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Cannot cancel completed job */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List media assets
         * @description Retrieve paginated list of media assets
         */
        get: {
            parameters: {
                query?: {
                    file_type?: "image" | "audio" | "video" | "document";
                    related_post_id?: string;
                    status?: "uploading" | "processing" | "ready" | "failed";
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media assets list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["MediaAsset"][];
                            count?: number;
                            has_more?: boolean;
                        };
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create media asset
         * @description Upload and create a new media asset
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": components["schemas"]["MediaAssetCreate"];
                };
            };
            responses: {
                /** @description Media asset created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MediaAsset"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media-assets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get media asset
         * @description Retrieve media asset details
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media asset details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MediaAsset"];
                    };
                };
                /** @description Media asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        /**
         * Update media asset
         * @description Update media asset metadata
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        title?: string;
                        /** Format: uuid */
                        related_post_id?: string | null;
                    };
                };
            };
            responses: {
                /** @description Media asset updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MediaAsset"];
                    };
                };
                400: components["responses"]["BadRequest"];
                /** @description Media asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        post?: never;
        /**
         * Delete media asset
         * @description Remove media asset and associated file
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media asset deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Media asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List blog posts
         * @description Retrieve paginated list of blog posts
         */
        get: {
            parameters: {
                query?: {
                    status?: "draft" | "published" | "archived";
                    author_id?: string;
                    category_id?: string;
                    tag_id?: string;
                    /** @description Search in title and content */
                    search?: string;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Blog posts list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["BlogPost"][];
                            count?: number;
                            has_more?: boolean;
                        };
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /**
         * Create blog post
         * @description Create a new blog post
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BlogPostCreate"];
                };
            };
            responses: {
                /** @description Blog post created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BlogPost"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get blog post
         * @description Retrieve detailed blog post information
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Blog post details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BlogPost"];
                    };
                };
                /** @description Blog post not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        /**
         * Update blog post
         * @description Update blog post content and metadata
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        title?: string;
                        content?: string;
                        excerpt?: string;
                        /** Format: uri */
                        featured_image_url?: string;
                        /** Format: date-time */
                        published_at?: string;
                        /** @enum {string} */
                        status?: "draft" | "published" | "archived";
                        category_ids?: string[];
                        tag_ids?: string[];
                        template_type?: string;
                        seo_metadata?: Record<string, never>;
                    };
                };
            };
            responses: {
                /** @description Blog post updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BlogPost"];
                    };
                };
                400: components["responses"]["BadRequest"];
                /** @description Blog post not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        post?: never;
        /**
         * Delete blog post
         * @description Remove blog post and associated data
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Blog post deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Blog post not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posts/{id}/audio-assets": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get post audio assets
         * @description Retrieve all audio assets associated with a blog post
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Audio assets for the post */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["MediaAsset"][];
                            /** Format: uuid */
                            primary_audio_id?: string | null;
                        };
                    };
                };
                /** @description Blog post not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posts/{id}/primary-audio": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Set primary audio
         * @description Set the primary audio asset for a blog post
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        audio_asset_id: string;
                    };
                };
            };
            responses: {
                /** @description Primary audio updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BlogPost"];
                    };
                };
                400: components["responses"]["BadRequest"];
                /** @description Blog post or audio asset not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                500: components["responses"]["InternalError"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Check API health and connectivity
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example healthy */
                            status?: string;
                            /** Format: date-time */
                            timestamp?: string;
                            /** @example 1.0.0 */
                            version?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            error: {
                /**
                 * @description Machine-readable error code
                 * @example AUDIO_JOB_ESCAPED
                 */
                code: string;
                /**
                 * @description Human-readable error message
                 * @example The audio job has run away to join another circus
                 */
                message: string;
                /** @description Additional error context */
                details?: Record<string, never>;
                /**
                 * @description HTTP status code
                 * @example 500
                 */
                status: number;
                /**
                 * Format: date-time
                 * @description When the error occurred
                 */
                timestamp?: string;
                /** @description Request ID for debugging */
                requestId?: string;
            };
        };
        AudioJob: {
            /**
             * Format: uuid
             * @description Unique identifier for the audio job
             */
            id: string;
            /**
             * Format: uuid
             * @description Associated blog post ID
             */
            post_id?: string | null;
            /** @description Original text content to convert to audio */
            input_text?: string;
            /**
             * @description Current processing status
             * @enum {string}
             */
            status: "pending" | "processing" | "completed" | "failed" | "cancelled";
            /**
             * @description Target languages for audio generation
             * @example [
             *       "en",
             *       "es",
             *       "hi"
             *     ]
             */
            languages: string[];
            /** @description Detailed status for each language */
            language_statuses?: {
                [key: string]: {
                    /** @enum {string} */
                    status?: "pending" | "processing" | "completed" | "failed";
                    audio_url?: string | null;
                    error?: string | null;
                    /** Format: date-time */
                    completed_at?: string | null;
                };
            };
            /**
             * @description Generated audio URLs by language
             * @example {
             *       "en": "https://storage.supabase.co/audio/en-job123.mp3",
             *       "es": "https://storage.supabase.co/audio/es-job123.mp3"
             *     }
             */
            audio_urls?: {
                [key: string]: string;
            };
            /** @description Audio generation configuration */
            config?: {
                /** @description TTS voice identifier */
                voice_id?: string;
                /** @enum {string} */
                voice_gender?: "male" | "female";
                /** @enum {string} */
                personality?: "art_dealer" | "art_instructor" | "hybrid";
                speed?: number;
                title?: string;
            };
            /** @description Whether this is a draft/preview generation */
            is_draft?: boolean;
            /** @description Languages that have been successfully processed */
            completed_languages?: string[];
            /** @description Currently processing language */
            current_language?: string | null;
            /** @description Cached translations by language */
            translated_texts?: {
                [key: string]: string;
            };
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at?: string;
        };
        AudioJobCreate: {
            /** @description Text content to convert to audio */
            input_text: string;
            /** Format: uuid */
            post_id?: string | null;
            /** @description Target languages for generation */
            languages: string[];
            config?: {
                voice_id?: string;
                /** @enum {string} */
                voice_gender?: "male" | "female";
                /** @enum {string} */
                personality?: "art_dealer" | "art_instructor" | "hybrid";
                speed?: number;
                title?: string;
            };
            /** @default false */
            is_draft: boolean;
        };
        MediaAsset: {
            /** Format: uuid */
            id: string;
            /** @description Human-readable title */
            title: string;
            /**
             * Format: uri
             * @description Public URL to access the file
             */
            file_url?: string;
            /** @enum {string} */
            file_type: "image" | "audio" | "video" | "document";
            /** @description MIME type of the file */
            mime_type?: string;
            /** @description File size in bytes */
            file_size_bytes?: number;
            /** Format: uuid */
            related_post_id?: string | null;
            /** @description AI generation metadata */
            generation_metadata?: {
                /** @enum {string} */
                type?: "tts" | "image_analysis" | "upload";
                language?: string | null;
                /** Format: date-time */
                generated_at?: string;
                model?: string;
            };
            /**
             * @default ready
             * @enum {string}
             */
            status: "uploading" | "processing" | "ready" | "failed";
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at?: string;
        };
        MediaAssetCreate: {
            title: string;
            /** @enum {string} */
            file_type: "image" | "audio" | "video" | "document";
            /**
             * Format: binary
             * @description Base64 encoded file data
             */
            file_data: string;
            mime_type?: string;
            /** Format: uuid */
            related_post_id?: string | null;
            generation_metadata?: Record<string, never>;
        };
        BlogPost: {
            /** Format: uuid */
            id: string;
            title: string;
            slug: string;
            /** @description Main content in English */
            content?: string;
            excerpt?: string;
            /** Format: uri */
            featured_image_url?: string | null;
            /** Format: date-time */
            published_at?: string | null;
            /** @enum {string} */
            status?: "draft" | "published" | "archived";
            /** Format: uuid */
            author_id?: string;
            categories?: {
                /** Format: uuid */
                id?: string;
                name?: string;
            }[];
            tags?: {
                /** Format: uuid */
                id?: string;
                name?: string;
            }[];
            /** @description Audio assets organized by language */
            audio_assets_by_language?: {
                [key: string]: {
                    /** Format: uuid */
                    id?: string;
                    /** Format: uri */
                    url?: string;
                    duration_seconds?: number | null;
                };
            };
            /** Format: uuid */
            primary_audio_id?: string | null;
            template_type?: string | null;
            seo_metadata?: Record<string, never>;
            reading_time?: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at?: string;
        };
        BlogPostCreate: {
            title: string;
            content: string;
            excerpt?: string;
            /** Format: uri */
            featured_image_url?: string;
            /** Format: date-time */
            published_at?: string;
            /**
             * @default draft
             * @enum {string}
             */
            status: "draft" | "published" | "archived";
            /** Format: uuid */
            author_id?: string;
            category_ids?: string[];
            tag_ids?: string[];
            template_type?: string;
            seo_metadata?: Record<string, never>;
        };
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Internal server error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
