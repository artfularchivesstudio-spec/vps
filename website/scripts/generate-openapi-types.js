#!/usr/bin/env node

// 🎭 The OpenAPI Type Conjurer - Where YAML becomes TypeScript Magic! ✨
// 🎪 A theatrical performance of type generation and API sorcery

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// 🎨 Our stage directions and magical constants
const CONFIG = {
  openApiDir: path.join(__dirname, '../config/openapi'),
  outputDir: path.join(__dirname, '../generated/openapi-types'),
  mainSpec: 'openapi.yaml'
};

// 🎭 The Grand Performance Logger - Because every show needs a narrator
class TheatricalLogger {
  static success(message) {
    console.log(`✨ ${message}`);
  }
  
  static info(message) {
    console.log(`🎪 ${message}`);
  }
  
  static error(message) {
    console.error(`💥 ${message}`);
  }
  
  static warning(message) {
    console.warn(`⚠️  ${message}`);
  }
}

// 🎪 The Type Generation Maestro - Orchestrates the entire performance
class OpenAPITypeGenerator {
  constructor() {
    this.logger = TheatricalLogger;
  }
  
  // 🎬 The opening act - Prepare the stage for our performance
  async prepareStage() {
    this.logger.info('Preparing the grand stage for type generation...');
    
    // 🏗️ Ensure our output directory exists (like setting up the theater)
    if (!fs.existsSync(CONFIG.outputDir)) {
      fs.mkdirSync(CONFIG.outputDir, { recursive: true });
      this.logger.success('Created the mystical output directory!');
    }
    
    // 🔍 Check if our OpenAPI spec exists (the sacred script)
    const specPath = path.join(CONFIG.openApiDir, CONFIG.mainSpec);
    if (!fs.existsSync(specPath)) {
      this.logger.error(`The sacred OpenAPI scroll is missing at: ${specPath}`);
      this.logger.info('💡 Hint: Create your OpenAPI specification first!');
      process.exit(1);
    }
    
    return specPath;
  }
  
  // 🎭 The main performance - Generate types with theatrical flair
  async generateTypes(specPath) {
    this.logger.info('🎵 Beginning the type generation symphony...');
    
    try {
      const outputPath = path.join(CONFIG.outputDir, 'api-types.ts');
      
      // 🪄 Cast the openapi-typescript spell
      const command = `npx openapi-typescript "${specPath}" --output "${outputPath}"`;
      
      this.logger.info('🔮 Invoking the TypeScript transformation spell...');
      execSync(command, { stdio: 'inherit' });
      
      // 🎨 Add our theatrical header to the generated file
      await this.addTheatricalHeader(outputPath);
      
      this.logger.success('🎉 Types have been conjured successfully!');
      this.logger.info(`📜 Your magical types await at: ${outputPath}`);
      
    } catch (error) {
      this.logger.error(`The type generation spell has failed: ${error.message}`);
      process.exit(1);
    }
  }
  
  // 🎨 Add our signature theatrical flair to the generated file
  async addTheatricalHeader(filePath) {
    const originalContent = fs.readFileSync(filePath, 'utf8');
    
    const theatricalHeader = `// 🎭 Auto-Generated API Types - A TypeScript Masterpiece! ✨
// 🎪 Generated by our OpenAPI Type Conjurer on ${new Date().toISOString()}
// 🚫 DO NOT EDIT MANUALLY - This file is conjured by magical scripts!
// 🔄 To regenerate: npm run types:generate

`;
    
    const enhancedContent = theatricalHeader + originalContent;
    fs.writeFileSync(filePath, enhancedContent);
    
    this.logger.success('Added theatrical flair to the generated types!');
  }
  
  // 🎬 The grand finale - Execute the entire performance
  async performMagic() {
    this.logger.info('🎭 Welcome to the OpenAPI Type Generation Theater!');
    this.logger.info('🎪 Tonight\'s performance: "From YAML to TypeScript"');
    
    try {
      const specPath = await this.prepareStage();
      await this.generateTypes(specPath);
      
      this.logger.success('🎉 The performance was a resounding success!');
      this.logger.info('👏 Thank you for attending our type generation show!');
      
    } catch (error) {
      this.logger.error(`💥 The show must not go on: ${error.message}`);
      process.exit(1);
    }
  }
}

// 🎪 The Grand Finale - Let the show begin!
if (require.main === module) {
  const generator = new OpenAPITypeGenerator();
  generator.performMagic();
}

module.exports = OpenAPITypeGenerator;